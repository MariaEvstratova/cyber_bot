import logging

from data import db_session
from data.users import User
import asyncio

from telegram.ext import (Application, MessageHandler, filters, CommandHandler, ConversationHandler, ContextTypes,
                          CallbackQueryHandler)
from telegram import ReplyKeyboardMarkup, Update, InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = '6425799983:AAGUzo77JZPhT20_6SVFfpoD5DMcqzNE07M'
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
db_session.global_init("db/data_base.db")
logger = logging.getLogger(__name__)

GREETING_STATE = 1
REGISTRATION_STATE = 2
NAME_STATE = 3
SCHEDULE_STATE = 4
SEX_STATE = 5
AGE_STATE = 6
MENU_STATE = 7
CHOICE = 8
RECOMEND = 9

chat_id = ''


async def help(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text("–Ø —É–º–µ—é –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –∏–∑ –¥–≤—É—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


async def start(update, context):
    global chat_id
    chat_id_1 = update.message.chat_id
    chat_id = chat_id_1
    print(chat_id)
    reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞ N –¥–Ω–µ–π —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–∞–Ω–Ω—ã—Ö, –∞"
        " —Ç–∞–∫–∂–µ –æ–±—É—á–∏—Ç –æ—Å–Ω–æ–≤–∞–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã. ü§ñ –í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ"
        " –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", reply_markup=markup)
    return GREETING_STATE


async def greeting(update, context):
    message_text = update.message.text
    if message_text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å':
        reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã —Å–¥–µ–ª–∞–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –Ω–∞—á–Ω–µ–º.", reply_markup=markup)
        return REGISTRATION_STATE
    else:
        reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markup)
        return GREETING_STATE


async def registration(update, context):
    message_text = update.message.text
    if message_text == '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!':
        await update.message.reply_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return NAME_STATE
    else:
        reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=markup)
        return REGISTRATION_STATE


async def name(update, context):
    name_value = update.message.text
    if any(ch.isdigit() for ch in name_value):
        await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return NAME_STATE
    else:
        context.user_data['name'] = name_value
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ/–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
        return SCHEDULE_STATE


async def schedule(update, context):
    days_value = update.message.text
    if days_value == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or days_value == "–†–∞–±–æ—á–∏–µ/–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
        context.user_data['days'] = days_value
        reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª.", reply_markup=markup)
        return SEX_STATE
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SCHEDULE_STATE


async def sex(update, context):
    sex_value = update.message.text
    if sex_value == "–ú—É–∂—Å–∫–æ–π" or sex_value == "–ñ–µ–Ω—Å–∫–∏–π" or sex_value == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        if sex_value != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            context.user_data['sex'] = sex_value

        reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                          ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=markup)
        return AGE_STATE
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SEX_STATE


async def age(update, context):
    age_value = update.message.text
    if len(age_value.split()) != 2:
        age = age_value.split()
        context.user_data['age'] = f"{age[1]}-{age[3]}"
    else:
        age = age_value.split()
        if age[1] == '18':
            context.user_data['age'] = "0-18"
        else:
            context.user_data['age'] = "55-100"

    create_profile(context)

    reply_keyboard = [['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'], ['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'],
                      ['–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'], ['–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', '–ü–æ–º–æ—â—å']]

    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=markup)

    # return MENU_STATE
    return CHOICE


def create_profile(context):
    db_sess = db_session.create_session()
    user = User()
    user.Name = context.user_data['name']
    user.Age_Group = context.user_data['age']
    user.Schedule = context.user_data['days']
    db_sess.add(user)
    db_sess.commit()


async def menu(update:Update, context:ContextTypes.DEFAULT_TYPE):

    # inline_kb_full = InlineKeyboardMarkup(row_width=2)
    # inline_profile = InlineKeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    # inline_kb_full.add(InlineKeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', url='https://www.youtube.com/watch?v=H9yVRqPixS4'))
    # inline_recommendations = InlineKeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data='recommendations')
    # inline_kb_full.row(inline_recommendations)
    # inline_kb_full.add(InlineKeyboardButton('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', callback_data='results'))
    # inline_kb_full.add(InlineKeyboardButton('–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ', callback_data='test'))
    # inline_invite = InlineKeyboardButton('–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data='invitation')
    # inline_help = InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')
    # inline_kb_full.row(inline_invite, inline_help)

    return GREETING_STATE
    # return CHOICE


async def choice(update, context):
    # reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ']]
    # markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    # await update.message.reply_text("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç", reply_markup=markup)
    if update.message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        pass
    if update.message.text == '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç", reply_markup=markup)
        return RECOMEND
    if update.message.text == '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è':
        pass
    if update.message.text == '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ':
        pass
    if update.message.text == '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π':
        pass
    if update.message.text == '–ü–æ–º–æ—â—å':
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è /help, –Ω–µ –∑–Ω–∞—é
        pass
async def recomend(update, context):
    inline_keyboard = [
        [InlineKeyboardButton('–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ', callback_data='completed')],
        [InlineKeyboardButton('–û—Ç–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='not completed')],
        [InlineKeyboardButton('–ú–µ–Ω—é', callback_data='menu')]
    ]
    inline_markup = InlineKeyboardMarkup(inline_keyboard)
    await update.message.reply_text('–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Ññ 1. <–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>, —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...', reply_markup=inline_markup)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == 'menu':
        return AGE_STATE

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CallbackQueryHandler(button))

    condition = (filters.TEXT | filters.PHOTO) & ~filters.COMMAND
    greeting_handler = MessageHandler(condition, greeting)
    registration_handler = MessageHandler(condition, registration)
    name_handler = MessageHandler(condition, name)
    schedule_handler = MessageHandler(condition, schedule)
    sex_handler = MessageHandler(condition, sex)
    age_handler = MessageHandler(condition, age)
    menu_handler = MessageHandler(condition, menu)
    choice_handler = MessageHandler(condition, choice)
    recomend_handler = MessageHandler(condition, recomend)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GREETING_STATE: [greeting_handler],
            REGISTRATION_STATE: [registration_handler],
            NAME_STATE: [name_handler],
            SCHEDULE_STATE: [schedule_handler],
            SEX_STATE: [sex_handler],
            AGE_STATE: [age_handler],
            MENU_STATE: [menu_handler],
            CHOICE: [choice_handler],
            RECOMEND: [recomend_handler]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv_handler)

    application.run_polling()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
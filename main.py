import logging
from datetime import datetime, timedelta, time
from typing import Optional

import pytz
from sqlalchemy import func
import telegram
from data import db_session
from data.users import User
from data.recommendations import Recommendation
from data.status_recommendation import Status_recommendation
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, CallbackContext, \
    CallbackQueryHandler, ContextTypes, Updater
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, Update

BOT_TOKEN = '6522784356:AAHB7lKSBukJDq-Tq3SAB9mxql95Cn9Dutg'
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
bot = telegram.Bot(token=BOT_TOKEN)
db_session.global_init("db/data_base.db")
logger = logging.getLogger(__name__)

(GREETING_STATE, REGISTRATION_STATE, NAME_STATE, SCHEDULE_STATE, SEX_STATE,
 AGE_STATE, SHOW_MENU_STATE, TIME_STATE, TIMEZONE_STATE, PERIOD_STATE) = range(10)

PROFILE_SHOW_STATE, PROFILE_EDIT_STATE, PROFILE_EDIT_FIELD_STATE, PROFILE_EDIT_APPLY_STATE = range(4)
ADVENT_TIMER_STATE, ADVENT_WORK_STATE = range(2)

BUTTON_REC_DONE, BUTTON_REC_SKIP, BUTTON_REC_REPORT, BUTTON_REC_SHARE, BUTTON_RUN_TEST = ("button_rec_done",
                                                                                          "button_rec_skip",
                                                                                          "button_rec_report",
                                                                                          "button_rec_share",
                                                                                          "button_run_test")

REC_STATUS_INIT, REC_STATUS_DONE, REC_STATUS_SKIP = '0', '1', '2'


async def get_timezone_by_utc_offset(utc_offset: timedelta) -> str:
    current_utc_time = datetime.now(pytz.utc)
    for tz in map(pytz.timezone, pytz.all_timezones_set):
        if current_utc_time.astimezone(tz).utcoffset() == utc_offset:
            return tz.zone
    return ""


async def help(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text("–Ø —É–º–µ—é –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –∏–∑ –¥–≤—É—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞
async def find_user_by_chat_id(chat_id: str) -> Optional[User]:
    db_sess = db_session.create_session()
    result = db_sess.query(User).filter(User.Chat_Id == chat_id).first()
    db_sess.close()
    return result


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def find_user_by_id(user_id: str) -> Optional[User]:
    db_sess = db_session.create_session()
    result = db_sess.query(User).filter(User.User_ID == user_id).first()
    db_sess.close()
    return result


def build_job_rec_name(user_id: str) -> str:
    return f"rec_{user_id}"


def build_job_not_name(user_id: str) -> str:
    return f"not_{user_id}"


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –∞–¥–≤–µ–Ω—Ç–µ
async def get_recommendation_count() -> int:
    db_sess = db_session.create_session()
    recommendations_count = db_sess.query(Recommendation).count()
    db_sess.close()
    return recommendations_count


# –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ ID
async def get_recommendation_info_by_id(rec_id: int) -> Optional[Recommendation]:
    db_sess = db_session.create_session()
    rec = db_sess.query(Recommendation).filter(Recommendation.id == rec_id).first()
    db_sess.close()
    return rec


# –í—Å–µ –ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def is_all_recommendation_sent(user_id: str) -> bool:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    recommendations_count = await get_recommendation_count()

    db_sess = db_session.create_session()
    sent_recommendations_count = (db_sess.query(Status_recommendation)
                                  .filter(Status_recommendation.user_id == user_id)
                                  .count()
                                  )
    db_sess.close()
    return sent_recommendations_count >= recommendations_count


# –í—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–≤–µ–Ω—Ç
async def is_advent_completed(user_id: str) -> bool:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    recommendations_count = await get_recommendation_count()

    db_sess = db_session.create_session()
    completed_recommendations_count = (db_sess.query(Status_recommendation)
                                       .filter(Status_recommendation.user_id == user_id,
                                               Status_recommendation.rec_status == REC_STATUS_DONE)
                                       .count()
                                       )
    db_sess.close()
    return completed_recommendations_count >= recommendations_count


async def skip_rec(context, user_id, rec_id):
    user = await find_user_by_id(user_id)
    if user is None:
        return

    db_sess = db_session.create_session()
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –±–∞–∑–µ, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å
    rec = (db_sess.query(Status_recommendation).
           filter(Status_recommendation.user_id == user.User_ID, Status_recommendation.rec_id == rec_id).
           first())
    db_sess.close()

    if rec is None:
        return
    elif rec.rec_status != REC_STATUS_INIT:
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏–∑ —á–∞—Ç–∞
    await context.bot.delete_message(chat_id=user.Chat_Id, message_id=rec.message_id)

    # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –º–µ–Ω—è—è —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ç–∏—Ä–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç.–∫. –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ)
    rec.rec_status = REC_STATUS_SKIP
    rec.message_id = ""

    db_sess = db_session.create_session()
    db_sess.add(rec)
    db_sess.commit()
    db_sess.close()


async def start(update, context):
    chat_id = str(update.message.chat.id)
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await bot.send_photo(chat_id=chat_id,
                             photo='https://img.freepik.com/free-vector/flat-background-for-safer-internet-day_23-2151127509.jpg?w=2000&t=st=1717694697~exp=1717695297~hmac=edd5b2ffe89d8b2901334e3df3190bffc0ed426ca69706be691a573487acdd33',
                             caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞ N –¥–Ω–µ–π —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–∞–Ω–Ω—ã—Ö,"
                                     " –∞ —Ç–∞–∫–∂–µ –æ–±—É—á–∏—Ç –æ—Å–Ω–æ–≤–∞–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã. ü§ñ –í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
                                     " –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                             reply_markup=markup)
        return GREETING_STATE
    else:
        reply_keyboard = [['–ú–µ–Ω—é']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        await bot.send_photo(chat_id=chat_id,
                             photo='https://img.freepik.com/free-vector/technical-support-service-site_80328-68.jpg?t=st=1717695596~exp=1717699196~hmac=419f0dc67a3bb3e7fecfe47e9e64615daaee5692bdb3c828e3c2dae5265d1376&w=2000',
                             caption=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.Name}, –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
                             reply_markup=markup)
        return SHOW_MENU_STATE


async def greeting(update, context):
    message_text = update.message.text
    if message_text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å':
        reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã —Å–¥–µ–ª–∞–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –Ω–∞—á–Ω–µ–º.", reply_markup=markup)
        return REGISTRATION_STATE
    else:
        reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                        reply_markup=markup)
        return GREETING_STATE


async def registration(update, context):
    message_text = update.message.text
    if message_text == '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!' or message_text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ':
        await update.message.reply_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return NAME_STATE
    else:
        reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                        reply_markup=markup)
        return REGISTRATION_STATE


async def name(update, context):
    name_value = update.message.text
    if any(ch.isdigit() for ch in name_value):
        await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return NAME_STATE
    else:
        context.user_data['name'] = name_value
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ –¥–Ω–∏', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
        return SCHEDULE_STATE


async def schedule(update, context):
    days_value = update.message.text
    if days_value == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or days_value == "–†–∞–±–æ—á–∏–µ –¥–Ω–∏" or days_value == "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
        context.user_data['days'] = days_value
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö(–æ—Ç 0 –¥–æ 23), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚åö")
        return TIME_STATE
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SCHEDULE_STATE


async def time_schedule(update, context):
    time_value = update.message.text
    if time_value.isdigit():
        if 0 <= int(time_value) <= 23:
            context.user_data['time'] = f'{time_value}:00'
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
                                            "–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –¥–Ω—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.")
            return PERIOD_STATE
        else:
            await update.message.reply_text("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ üòù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return TIME_STATE
    else:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return TIME_STATE


async def period(update, context):
    period_value = update.message.text
    if period_value.isdigit():
        if 1 <= int(period_value) <= 30:
            context.user_data['period'] = str(period_value)
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã "
                                            "(–≤ —á–∞—Å–∞—Ö, –Ω–∞—á–∏–Ω–∞—è —Å + –∏–ª–∏ -). "
                                            "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞: +4, –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞: -1")
            return TIMEZONE_STATE
        else:
            await update.message.reply_text("–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return PERIOD_STATE
    else:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return PERIOD_STATE


async def timezone_schedule(update, context):
    if update.message.text[0] != "+" and update.message.text[0] != "-":
        await update.message.reply_text("–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ª–∏–±–æ —Å +, –ª–∏–±–æ —Å -. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return TIMEZONE_STATE

    if update.message.text[1:].isdigit():
        moscow_offset_value = update.message.text.replace("+", "")
        utc_offset_hours = timedelta(hours=3 + int(moscow_offset_value))
        user_timezone = await get_timezone_by_utc_offset(utc_offset_hours)
        if user_timezone == "":
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –ú–°–ö{update.message.text}, "
                                            f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ —á–∞—Å–∞–º —Å –ú–æ—Å–∫–≤–æ–π.")
            return TIMEZONE_STATE
        else:
            context.user_data['timezone'] = user_timezone

            reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª", reply_markup=markup)
            return SEX_STATE
    else:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return TIMEZONE_STATE


async def sex(update, context):
    sex_value = update.message.text
    if sex_value == "–ú—É–∂—Å–∫–æ–π" or sex_value == "–ñ–µ–Ω—Å–∫–∏–π" or sex_value == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['sex'] = sex_value
        reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                          ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=markup)
        return AGE_STATE
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SEX_STATE


async def age(update, context):
    age_value = update.message.text
    if len(age_value.split()) != 2:
        age = age_value.split()
        context.user_data['age'] = f"{age[1]}-{age[3]}"
    else:
        age = age_value.split()
        if age[1] == '18':
            context.user_data['age'] = "0-18"
        else:
            context.user_data['age'] = "55-100"

    create_profile(update, context)
    return await show_menu(update, context)


def create_profile(update, context):
    user = User()
    user.Name = context.user_data['name']
    user.Age_Group = context.user_data['age']
    user.Schedule = context.user_data['days']
    user.Sex = context.user_data['sex']
    user.UserName = str(update.message.from_user.username)
    user.Chat_Id = str(update.message.chat.id)
    user.Time = context.user_data['time']
    user.Timezone = context.user_data['timezone']
    user.Period = str(context.user_data['period'])

    db_sess = db_session.create_session()
    db_sess.add(user)
    db_sess.commit()
    db_sess.close()


async def show_menu(update, context):
    user = await find_user_by_chat_id(update.message.chat.id)

    reply_keyboard = [['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']]
    if user and (user.Advent_Start is None):
        # –ö–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –∞–¥–≤–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞–Ω–µ–µ –∞–¥–≤–µ–Ω—Ç
        reply_keyboard.append(['–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'])

    reply_keyboard.extend([
        ['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'],
        ['–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'],
        ['–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', '–ü–æ–º–æ—â—å']])

    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    # await bot.send_photo(chat_id=update.message.chat.id,
    #                      photo="https://img.freepik.com/free-vector/tiny-business-people-with-digital-devices-big-globe-surfing-internet_335657-2449.jpg?t=st=1717695852~exp=1717699452~hmac=5d5ae3568da44133edf2c0a7f6c0a899ee29ad8db05a4444b961a293ae245a8e&w=2000")
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=markup)
    return ConversationHandler.END


async def show_profile(update, context):
    reply_keyboard = [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'], ['–ú–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    user = await find_user_by_chat_id(update.message.chat.id)
    reply_text = ("–ü—Ä–æ—Ñ–∏–ª—å (–Ω–æ–≤—ã–π) üîΩ \n"
                  f"üí† –ò–º—è - {user.Name} \n"
                  f"üí† –ì—Ä–∞—Ñ–∏–∫ - {user.Schedule} \n"
                  f"üí† –í–æ–∑—Ä–∞—Å—Ç - {user.Age_Group} –ª–µ—Ç \n"
                  f"üí† –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - {user.Time}\n")
    if user.Sex != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        reply_text = reply_text + f"üí† –ü–æ–ª {user.Sex}"

    await update.message.reply_text(reply_text, reply_markup=markup)
    return PROFILE_EDIT_STATE


async def edit_profile(update, context):
    user = await find_user_by_chat_id(update.message.chat.id)
    if user is None:
        return PROFILE_EDIT_STATE

    db_sess = db_session.create_session()
    sent_recommendations = db_sess.query(Status_recommendation).filter(
        Status_recommendation.user_id == user.User_ID).all()
    db_sess.close()

    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É, –≤ –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏
    if len(sent_recommendations) == 0:
        reply_keyboard = [['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–ì—Ä–∞—Ñ–∏–∫', '–í—Ä–µ–º—è'], ["–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", '–ù–∞–∑–∞–¥']]
    else:
        reply_keyboard = [['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"], ['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text("–ß—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
    return PROFILE_EDIT_FIELD_STATE


async def edit_profile_request(update, context):
    message_text = update.message.text
    context.user_data["edit_profile_request"] = message_text
    if message_text == "–ò–º—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
    elif message_text == "–í–æ–∑—Ä–∞—Å—Ç":
        reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                          ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=markup)
    elif message_text == "–ü–æ–ª":
        reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª", reply_markup=markup)
    elif message_text == "–ì—Ä–∞—Ñ–∏–∫":
        # TODO: –ù–µ –¥–∞–≤–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ advent
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
    elif message_text == "–ì—Ä–∞—Ñ–∏–∫":
        # TODO: –ù–µ –¥–∞–≤–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ advent
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
    elif message_text == "–í—Ä–µ–º—è":
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö(–æ—Ç 0 –¥–æ 23), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚åö")
    elif message_text == "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
                                        "–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –¥–Ω—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.")
    return PROFILE_EDIT_APPLY_STATE


async def edit_profile_apply(update, context):
    message_text = update.message.text
    request_type = context.user_data["edit_profile_request"]

    if request_type == "–ò–º—è":
        if any(ch.isdigit() for ch in message_text):
            await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return PROFILE_EDIT_APPLY_STATE
        context.user_data['name'] = message_text
    elif request_type == "–í–æ–∑—Ä–∞—Å—Ç":
        age_value = update.message.text
        if len(age_value.split()) != 2:
            age = age_value.split()
            context.user_data['age'] = f"{age[1]}-{age[3]}"
        else:
            age = age_value.split()
            if age[1] == '18':
                context.user_data['age'] = "0-18"
            else:
                context.user_data['age'] = "55-100"
    elif request_type == "–ü–æ–ª":
        if message_text == "–ú—É–∂—Å–∫–æ–π" or message_text == "–ñ–µ–Ω—Å–∫–∏–π" or message_text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data['sex'] = message_text
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return PROFILE_EDIT_APPLY_STATE
    elif request_type == "–ì—Ä–∞—Ñ–∏–∫":
        if message_text == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or message_text == "–†–∞–±–æ—á–∏–µ" or message_text == "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
            context.user_data['days'] = message_text
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return PROFILE_EDIT_APPLY_STATE
    elif request_type == "–í—Ä–µ–º—è":
        if message_text.isdigit():
            if 0 <= int(message_text) <= 23:
                context.user_data['time'] = f'{message_text}:00:00'
            else:
                await update.message.reply_text("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ üòù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return PROFILE_EDIT_APPLY_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return PROFILE_EDIT_APPLY_STATE
    elif request_type == "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        if message_text.isdigit():
            if 1 <= int(message_text) <= 30:
                context.user_data['period'] = str(message_text)
            else:
                await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return PROFILE_EDIT_APPLY_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return PROFILE_EDIT_APPLY_STATE

    user = await find_user_by_chat_id(update.message.chat.id)

    user.Name = context.user_data.get('name', user.Name)
    user.Age_Group = context.user_data.get('age', user.Age_Group)
    user.Schedule = context.user_data.get('days', user.Schedule)
    user.Sex = context.user_data.get('sex', user.Sex)
    user.Time = context.user_data.get('time', user.Time)
    user.Period = context.user_data.get('period', user.Period)

    db_sess = db_session.create_session()
    db_sess.add(user)
    db_sess.commit()
    db_sess.close()

    reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ú–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", reply_markup=markup)
    return PROFILE_SHOW_STATE


async def send_recommendation(context):
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞
    user = await find_user_by_chat_id(context.job.chat_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –∞–¥–≤–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è - –≤—ã—Ö–æ–¥
    if user is None:
        await context.bot.send_message(chat_id=context.job.chat_id,
                                       text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        context.job.schedule_removal()
        return

    db_sess = db_session.create_session()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    recommendations_count = await get_recommendation_count()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sent_recommendations = (db_sess.query(Status_recommendation)
                            .filter(Status_recommendation.user_id == user.User_ID)
                            .order_by(Status_recommendation.rec_id).all()
                            )
    db_sess.close()

    # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é
    if len(sent_recommendations) != 0:
        last_rec = sent_recommendations[-1]
        new_req_id = last_rec.rec_id + 1
    else:
        last_rec = None
        new_req_id = 1

    # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–¥–≤–µ–Ω—Ç - –≤—ã—Ö–æ–¥
    if new_req_id > recommendations_count:
        await context.bot.send_message(chat_id=user.Chat_Id, text=f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!')
        context.job.schedule_removal()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    rec_new = await get_recommendation_info_by_id(new_req_id)
    if rec_new is None:
        return

    keyboard = [
        [
            InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"{BUTTON_REC_DONE}:{new_req_id}"),
            InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"{BUTTON_REC_SKIP}:{new_req_id}"),
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    message = await context.bot.send_message(chat_id=user.Chat_Id,
                                             text=f'{context.job.data}, '
                                                  f'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ {new_req_id}: '
                                                  f'{rec_new.recommendation}!',
                                             reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –±–∞–∑—É
    stat_rec = Status_recommendation()
    stat_rec.chat_id = user.Chat_Id
    stat_rec.user_id = user.User_ID
    stat_rec.send_time = datetime.now()
    stat_rec.message_id = message.message_id
    stat_rec.rec_id = new_req_id
    stat_rec.rec_status = REC_STATUS_INIT

    db_sess = db_session.create_session()
    db_sess.add(stat_rec)
    db_sess.commit()
    db_sess.close()

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–≤–∞—è
    if last_rec:
        # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–µ
        if last_rec.rec_status == REC_STATUS_INIT:
            await skip_rec(context, user.User_ID, last_rec.rec_id)


async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    user = await find_user_by_chat_id(context.job.chat_id)
    if user is None:
        await context.bot.send_message(chat_id=context.job.chat_id,
                                       text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        context.job.schedule_removal()
        return

    # –ï—Å–ª–∏ –∞–¥–≤–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if await is_advent_completed(user.User_ID):
        context.job.schedule_removal()
        return

    db_sess = db_session.create_session()
    skipped_recommendations = db_sess.query(Status_recommendation).filter(
        Status_recommendation.user_id == user.User_ID, Status_recommendation.rec_status == REC_STATUS_SKIP).all()
    db_sess.close()

    if len(skipped_recommendations) == 0:
        return

    result = ''
    for rec in skipped_recommendations:
        rec_info = await get_recommendation_info_by_id(rec.rec_id)
        if rec_info is None:
            continue
        result += f'–î–µ–Ω—å {rec.rec_id}. {rec_info.recommendation}\n'

    result = f'–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {len(skipped_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n' + result
    keyboard = [[InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", callback_data=f"{BUTTON_REC_REPORT}")]]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await context.bot.send_message(chat_id=user.Chat_Id, text=result, reply_markup=markup)


async def send_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


async def done_recommendation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    del_idx = query.data.find(":") + 1
    rec_id = int(query.data[del_idx:])

    user = await find_user_by_chat_id(chat_id)
    if user is None:
        return

    db_sess = db_session.create_session()
    rec = (db_sess.query(Status_recommendation).
           filter(Status_recommendation.user_id == user.User_ID, Status_recommendation.rec_id == rec_id).
           first())
    db_sess.close()

    rec.rec_status = REC_STATUS_DONE

    db_sess = db_session.create_session()
    db_sess.add(rec)
    db_sess.commit()
    db_sess.close()

    await query.delete_message()
    await context.bot.send_message(chat_id=chat_id, text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ: {rec_id}")


async def skip_recommendation(update, context):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    del_idx = query.data.find(":") + 1
    rec_id = int(query.data[del_idx:])

    user = await find_user_by_chat_id(chat_id)
    if user is None:
        return

    await skip_rec(context, user.User_ID, rec_id)
    await context.bot.send_message(chat_id=user.Chat_Id, text=f"–û—Ç–ª–æ–∂–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ: {rec_id}")


async def run_recommendation_job(context, chat_id):
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        return

    user_tz = pytz.timezone(user.Timezone)
    user_time = datetime.strptime(user.Time, '%H:%M')

    # –ó–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    if not await is_all_recommendation_sent(user.User_ID):
        sent_time = time(user_time.hour, user_time.minute, 00, tzinfo=user_tz)
        sent_days = (0, 1, 2, 3, 4, 5, 6)
        if user.Schedule == "–†–∞–±–æ—á–∏–µ –¥–Ω–∏":
            sent_days = (0, 1, 2, 3, 4)
        elif user.Schedule == '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏':
            sent_days = (5, 6)

        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
        context.job_queue.run_daily(send_recommendation, name=build_job_rec_name(user.Chat_Id),
                                    time=sent_time, days=sent_days, data=user.Name, chat_id=user.Chat_Id)

    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–≤–µ–Ω—Ç
    if not await is_advent_completed(user.User_ID):
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ 30 –º–∏–Ω –ø–æ–∑–∂–µ
        sent_datetime = (user_tz.localize(
            datetime.combine(datetime.today(), time(user_time.hour, user_time.minute, 00)), is_dst=None) +
                         timedelta(minutes=30))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        context.job_queue.run_repeating(send_notification, name=build_job_not_name(user.Chat_Id),
                                        first=sent_datetime, interval=timedelta(days=int(user.Period)),
                                        data=user.Name, chat_id=user.Chat_Id)

    # TODO: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # context.job_queue.run_repeating(send_recommendation, 5, name=build_job_rec_name(user.Chat_Id), data=user.Name, chat_id=user.Chat_Id)
    # context.job_queue.run_repeating(send_notification, 10, name=build_job_not_name(user.Chat_Id), data=user.Name, chat_id=user.Chat_Id)


async def start_advent(update, context):
    chat_id = update.message.chat_id
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω!')
        return

    if not (user.Advent_Start is None):
        await context.bot.send_message(chat_id=chat_id, text='–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ä–∞–Ω–µ–µ!')
        return

    user.Advent_Start = datetime.now()
    db_sess = db_session.create_session()
    db_sess.add(user)
    db_sess.commit()
    db_sess.close()

    await context.bot.send_message(chat_id=chat_id, text='–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω')
    await run_recommendation_job(context, chat_id)


async def resume_sending(context):
    chats = {}

    db_sess = db_session.create_session()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø—É—â–µ–Ω –∞–¥–≤–µ–Ω—Ç, –Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    users = (db_sess.query(User.Chat_Id).
             filter(User.Advent_Start != None).
             distinct())
    for row in users:
        chats[row[0]] = row[0]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    recommendations_count = await get_recommendation_count()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–æ –µ—â–µ –Ω–µ –≤—Å–µ
    chat_users = (db_sess.query(Status_recommendation.chat_id).
                  group_by(Status_recommendation.chat_id).
                  having(func.max(Status_recommendation.rec_id) < recommendations_count).
                  all())
    for row in chat_users:
        chats[row[0]] = row[0]
    db_sess.close()

    for chat_id in chats:
        await run_recommendation_job(context, chat_id)


async def share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat.id)

    user = await find_user_by_chat_id(chat_id)
    if user is None:
        await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        context.job.schedule_removal()
        return

    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url='https://t.me/share/url?url=https://t.me/Cyber_safeness_bot')
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=chat_id,
                                   text=f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –∏ –æ–Ω–∏ "
                                        f"–±—ã–ª–∏ –≥—Ä–∞–º–æ—Ç–Ω—ã–º–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥–µ!",
                                   reply_markup=markup)


async def show_recommendation(update, context):
    chat_id = update.message.chat_id
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        return

    db_sess = db_session.create_session()
    list_rec = (db_sess.query(Status_recommendation)
                .filter(Status_recommendation.user_id == user.User_ID)
                .order_by(Status_recommendation.rec_id.desc())
                .limit(3)
                .all())
    db_sess.close()

    if len(list_rec) == 0:
        await context.bot.send_message(chat_id=user.Chat_Id,
                                       text='–°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—É—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç"')
        return

    result = ''
    for idx, rec in enumerate(list_rec):
        rec_info = await get_recommendation_info_by_id(rec.rec_id)
        if rec_info is None:
            continue
        if idx == 0:
            result += f'*–î–µ–Ω—å {rec.rec_id}. –°–µ–≥–æ–¥–Ω—è.* {rec_info.recommendation}\n'
        else:
            result += f'*–î–µ–Ω—å {rec.rec_id}.* {rec_info.recommendation}\n'

    await context.bot.send_message(chat_id=user.Chat_Id, text=f'–°–ø–∏—Å–æ–∫ —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n\n{result}', parse_mode='markdown')


async def test_digital_gegeyna(update, context):
    user = await find_user_by_chat_id(update.message.chat_id)
    if user is None:
        return

    if await is_advent_completed(user.User_ID):
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"{BUTTON_RUN_TEST}")]]
        markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! '
            '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–≤–∞–Ω–∏–µ –î–∂–µ–¥–∞—è –æ—Ä–¥–µ–Ω–∞ –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã –∏ '
            '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –æ—Ç –ö–∏–±–µ—Ä–ø—Ä–æ—Ç–µ–∫—Ç–∞? '
            '–¢–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!',
            reply_markup=markup)
    else:
        await update.message.reply_text(
            '–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ')


async def forma_yandex(update, context):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        return

    await context.bot.send_message(chat_id=user.Chat_Id, text='https://forms.yandex.ru/u/6663258b5056903972729751/')


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    application.job_queue.run_once(resume_sending, 1)

    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("help", help))

    condition = (filters.TEXT | filters.PHOTO) & ~filters.COMMAND

    # –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    start_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GREETING_STATE: [MessageHandler(condition, greeting)],
            REGISTRATION_STATE: [MessageHandler(condition, registration)],
            NAME_STATE: [MessageHandler(condition, name)],
            SCHEDULE_STATE: [MessageHandler(condition, schedule)],
            TIME_STATE: [MessageHandler(condition, time_schedule)],
            TIMEZONE_STATE: [MessageHandler(condition, timezone_schedule)],
            SEX_STATE: [MessageHandler(condition, sex)],
            AGE_STATE: [MessageHandler(condition, age)],
            PERIOD_STATE: [MessageHandler(condition, period)],
            SHOW_MENU_STATE: [MessageHandler(filters.Text(["–ú–µ–Ω—é"]), show_menu)]
        },
        fallbacks=[
            CommandHandler('stop', stop),
            MessageHandler(filters.Text(["–ú–µ–Ω—é"]), show_menu),
        ]
    )
    application.add_handler(start_handler)

    # –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    profile_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]), show_profile)],
        states={
            PROFILE_SHOW_STATE: [
                MessageHandler(filters.Text(["–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]), show_profile)
            ],
            PROFILE_EDIT_STATE: [
                MessageHandler(filters.Text(["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"]), edit_profile)
            ],
            PROFILE_EDIT_FIELD_STATE: [
                MessageHandler(filters.Text(["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ü–æ–ª", "–ì—Ä–∞—Ñ–∏–∫", "–í—Ä–µ–º—è", "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"]),
                               edit_profile_request),
                MessageHandler(filters.Text(["–ù–∞–∑–∞–¥"]), show_profile)
            ],
            PROFILE_EDIT_APPLY_STATE: [
                MessageHandler(condition, edit_profile_apply)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Text(["–ú–µ–Ω—é"]), show_menu),
        ]
    )

    application.add_handler(profile_handler)
    application.add_handler(
        MessageHandler(filters.Text(["–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ"]), start_advent))
    application.add_handler(MessageHandler(filters.Text(["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]), show_recommendation))
    application.add_handler(MessageHandler(filters.Text(["–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ"]), test_digital_gegeyna))
    application.add_handler(MessageHandler(filters.Text(["–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"]), share))

    application.add_handler(CallbackQueryHandler(done_recommendation, pattern=f"^{BUTTON_REC_DONE}:\\d+$"))
    application.add_handler(CallbackQueryHandler(skip_recommendation, pattern=f"^{BUTTON_REC_SKIP}:\\d+$"))
    application.add_handler(CallbackQueryHandler(send_results, pattern=f"^{BUTTON_REC_REPORT}"))
    application.add_handler(CallbackQueryHandler(forma_yandex, pattern=f"^{BUTTON_RUN_TEST}$"))

    application.run_polling()


if __name__ == '__main__':
    main()

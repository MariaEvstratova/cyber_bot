import logging
from datetime import datetime, timedelta
from typing import Optional
from zoneinfo import ZoneInfo

import pytz
from sqlalchemy import func

from data import db_session
from data.users import User
from data.recommendations import Recommendation
from data.status_recommendation import Status_recommendation
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, CallbackContext, \
    CallbackQueryHandler, ContextTypes
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, Update

BOT_TOKEN = '6522784356:AAHB7lKSBukJDq-Tq3SAB9mxql95Cn9Dutg'
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
db_session.global_init("db/data_base.db")
logger = logging.getLogger(__name__)

(GREETING_STATE, REGISTRATION_STATE, NAME_STATE, SCHEDULE_STATE, SEX_STATE,
 AGE_STATE, SHOW_MENU_STATE, TIME_STATE, TIMEZONE_STATE, PERIOD_STATE) = range(10)

PROFILE_SHOW_STATE, PROFILE_EDIT_STATE, PROFILE_EDIT_FIELD_STATE, PROFILE_EDIT_APPLY_STATE = range(4)
ADVENT_TIMER_STATE, ADVENT_WORK_STATE = range(2)

REC_BUTTON_DONE, REC_BUTTON_SKIP, REC_BUTTON_REPORT = "rec_button_done", "rec_button_skip", "rec_button_report"


async def get_timezone_by_utc_offset(utc_offset: timedelta) -> str:
    current_utc_time = datetime.now(pytz.utc)
    for tz in map(pytz.timezone, pytz.all_timezones_set):
        if current_utc_time.astimezone(tz).utcoffset() == utc_offset:
            return tz.zone
    return ""


async def help(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text("–Ø —É–º–µ—é –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥ –∏–∑ –¥–≤—É—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def find_user_by_chat_id(chat_id: str) -> Optional[User]:
    db_sess = db_session.create_session()
    return db_sess.query(User).filter(User.Chat_Id == chat_id).first()


async def start(update, context):
    chat_id = str(update.message.chat.id)
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞ N –¥–Ω–µ–π —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–∞–Ω–Ω—ã—Ö, –∞"
            " —Ç–∞–∫–∂–µ –æ–±—É—á–∏—Ç –æ—Å–Ω–æ–≤–∞–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã. ü§ñ –í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ"
            " –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", reply_markup=markup)
        return GREETING_STATE
    else:
        reply_keyboard = [['–ú–µ–Ω—é']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.Name}, –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.", reply_markup=markup)
        return SHOW_MENU_STATE


async def greeting(update, context):
    message_text = update.message.text
    if message_text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å':
        reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã —Å–¥–µ–ª–∞–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –Ω–∞—á–Ω–µ–º.", reply_markup=markup)
        return REGISTRATION_STATE
    else:
        reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                        reply_markup=markup)
        return GREETING_STATE


async def registration(update, context):
    message_text = update.message.text
    if message_text == '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!' or message_text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ':
        await update.message.reply_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        return NAME_STATE
    else:
        reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                        reply_markup=markup)
        return REGISTRATION_STATE


async def name(update, context):
    name_value = update.message.text
    if any(ch.isdigit() for ch in name_value):
        await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return NAME_STATE
    else:
        context.user_data['name'] = name_value
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ –¥–Ω–∏', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
        return SCHEDULE_STATE


async def schedule(update, context):
    days_value = update.message.text
    if days_value == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or days_value == "–†–∞–±–æ—á–∏–µ –¥–Ω–∏" or days_value == "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
        context.user_data['days'] = days_value
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö(–æ—Ç 0 –¥–æ 23), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚åö")
        return TIME_STATE
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SCHEDULE_STATE


async def time_schedule(update, context):
    time_value = update.message.text
    if time_value.isdigit():
        if 0 <= int(time_value) <= 23:
            context.user_data['time'] = f'{time_value}:00'
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
                                            "–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –¥–Ω—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.")
            return PERIOD_STATE
        else:
            await update.message.reply_text("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ üòù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return TIME_STATE
    else:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return TIME_STATE


async def period(update, context):
    period_value = update.message.text
    if period_value.isdigit():
        if 1 <= int(period_value) <= 30:
            context.user_data['period'] = str(period_value)
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã "
                                            "(–≤ —á–∞—Å–∞—Ö, –Ω–∞—á–∏–Ω–∞—è —Å + –∏–ª–∏ -). "
                                            "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞: +4, –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞: -1")
            return TIMEZONE_STATE
        else:
            await update.message.reply_text("–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return PERIOD_STATE
    else:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return PERIOD_STATE


async def timezone_schedule(update, context):
    if update.message.text[0] != "+" and update.message.text[0] != "-":
        await update.message.reply_text("–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ª–∏–±–æ —Å +, –ª–∏–±–æ —Å -. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return TIMEZONE_STATE

    if update.message.text[1:].isdigit():
        moscow_offset_value = update.message.text.replace("+", "")
        utc_offset_hours = timedelta(hours=3 + int(moscow_offset_value))
        user_timezone = await get_timezone_by_utc_offset(utc_offset_hours)
        if user_timezone == "":
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –ú–°–ö{update.message.text}, "
                                            f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ —á–∞—Å–∞–º —Å –ú–æ—Å–∫–≤–æ–π.")
            return TIMEZONE_STATE
        else:
            context.user_data['timezone'] = user_timezone

            reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª", reply_markup=markup)
            return SEX_STATE
    else:
        await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return TIMEZONE_STATE


async def sex(update, context):
    sex_value = update.message.text
    if sex_value == "–ú—É–∂—Å–∫–æ–π" or sex_value == "–ñ–µ–Ω—Å–∫–∏–π" or sex_value == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data['sex'] = sex_value
        reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                          ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=markup)
        return AGE_STATE
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return SEX_STATE


async def age(update, context):
    age_value = update.message.text
    if len(age_value.split()) != 2:
        age = age_value.split()
        context.user_data['age'] = f"{age[1]}-{age[3]}"
    else:
        age = age_value.split()
        if age[1] == '18':
            context.user_data['age'] = "0-18"
        else:
            context.user_data['age'] = "55-100"

    create_profile(update, context)
    return await show_menu(update, context)


def create_profile(update, context):
    db_sess = db_session.create_session()
    user = User()
    user.Name = context.user_data['name']
    user.Age_Group = context.user_data['age']
    user.Schedule = context.user_data['days']
    user.Sex = context.user_data['sex']
    user.UserName = str(update.message.from_user.username)
    user.Chat_Id = str(update.message.chat.id)
    user.Time = context.user_data['time']
    user.Timezone = context.user_data['timezone']
    user.Period = str(context.user_data['period'])
    db_sess.add(user)
    db_sess.commit()


async def show_menu(update, context):
    db_sess = db_session.create_session()
    username = str(update.message.from_user.username)
    user = db_sess.query(User).filter(User.UserName == username).first()
    reply_keyboard = [['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']]
    if user:
        reply_keyboard.append(['–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'])
    reply_keyboard.extend([
        ['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'],
        ['–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'],
        ['–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', '–ü–æ–º–æ—â—å']])

    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é", reply_markup=markup)
    return ConversationHandler.END


async def show_profile(update, context):
    reply_keyboard = [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'], ['–ú–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    db_sess = db_session.create_session()
    username = str(update.message.from_user.username)
    user = db_sess.query(User).filter(User.UserName == username).first()

    reply_text = ("–ü—Ä–æ—Ñ–∏–ª—å (–Ω–æ–≤—ã–π) üîΩ \n"
                  f"üí† –ò–º—è - {user.Name} \n"
                  f"üí† –ì—Ä–∞—Ñ–∏–∫ - {user.Schedule} \n"
                  f"üí† –í–æ–∑—Ä–∞—Å—Ç - {user.Age_Group} –ª–µ—Ç \n"
                  f"üí† –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - {user.Time}\n")
    if user.Sex != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        reply_text = reply_text + f"üí† –ü–æ–ª {user.Sex}"

    await update.message.reply_text(reply_text, reply_markup=markup)
    return PROFILE_EDIT_STATE


async def edit_profile(update, context):
    db_sess = db_session.create_session()
    user = db_sess.query(User).filter(User.Chat_Id == str(update.message.chat.id)).first()
    sent_recommendations = db_sess.query(Status_recommendation).filter(Status_recommendation.user_id == user.User_ID).all()
    if len(sent_recommendations) == 0:
        reply_keyboard = [['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–ì—Ä–∞—Ñ–∏–∫', '–í—Ä–µ–º—è'], ["–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", '–ù–∞–∑–∞–¥']]
    else:
        reply_keyboard = [['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"], ['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text("–ß—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
    return PROFILE_EDIT_FIELD_STATE


async def edit_profile_request(update, context):
    message_text = update.message.text
    context.user_data["edit_profile_request"] = message_text
    if message_text == "–ò–º—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
    elif message_text == "–í–æ–∑—Ä–∞—Å—Ç":
        reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                          ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=markup)
    elif message_text == "–ü–æ–ª":
        reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª", reply_markup=markup)
    elif message_text == "–ì—Ä–∞—Ñ–∏–∫":
        # TODO: –ù–µ –¥–∞–≤–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ advent
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
    elif message_text == "–ì—Ä–∞—Ñ–∏–∫":
        # TODO: –ù–µ –¥–∞–≤–∞—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ advent
        reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                        " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                        reply_markup=markup)
    elif message_text == "–í—Ä–µ–º—è":
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö(–æ—Ç 0 –¥–æ 23), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚åö")
    elif message_text == "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
                                        "–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –¥–Ω—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.")
    return PROFILE_EDIT_APPLY_STATE


async def edit_profile_apply(update, context):
    message_text = update.message.text
    request_type = context.user_data["edit_profile_request"]

    if request_type == "–ò–º—è":
        if any(ch.isdigit() for ch in message_text):
            await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return PROFILE_EDIT_APPLY_STATE
        context.user_data['name'] = message_text
    elif request_type == "–í–æ–∑—Ä–∞—Å—Ç":
        age_value = update.message.text
        if len(age_value.split()) != 2:
            age = age_value.split()
            context.user_data['age'] = f"{age[1]}-{age[3]}"
        else:
            age = age_value.split()
            if age[1] == '18':
                context.user_data['age'] = "0-18"
            else:
                context.user_data['age'] = "55-100"
    elif request_type == "–ü–æ–ª":
        if message_text == "–ú—É–∂—Å–∫–æ–π" or message_text == "–ñ–µ–Ω—Å–∫–∏–π" or message_text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data['sex'] = message_text
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return PROFILE_EDIT_APPLY_STATE
    elif request_type == "–ì—Ä–∞—Ñ–∏–∫":
        if message_text == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or message_text == "–†–∞–±–æ—á–∏–µ" or message_text == "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
            context.user_data['days'] = message_text
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return PROFILE_EDIT_APPLY_STATE
    elif request_type == "–í—Ä–µ–º—è":
        if message_text.isdigit():
            if 0 <= int(message_text) <= 23:
                context.user_data['time'] = f'{message_text}:00:00'
            else:
                await update.message.reply_text("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ üòù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return PROFILE_EDIT_APPLY_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return PROFILE_EDIT_APPLY_STATE
    elif request_type == "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        if message_text.isdigit():
            if 1 <= int(message_text) <= 30:
                context.user_data['period'] = str(message_text)
            else:
                await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return PROFILE_EDIT_APPLY_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return PROFILE_EDIT_APPLY_STATE

    db_sess = db_session.create_session()
    username = str(update.message.from_user.username)
    user = db_sess.query(User).filter(User.UserName == username).first()

    user.Name = context.user_data.get('name', user.Name)
    user.Age_Group = context.user_data.get('age', user.Age_Group)
    user.Schedule = context.user_data.get('days', user.Schedule)
    user.Sex = context.user_data.get('sex', user.Sex)
    user.Time = context.user_data.get('time', user.Time)
    user.Period = context.user_data.get('period', user.Period)

    db_sess.add(user)
    db_sess.commit()

    reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ú–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", reply_markup=markup)
    return PROFILE_SHOW_STATE


async def send_recommendation(context):
    chat_id = context.job.chat_id

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞
    user = await find_user_by_chat_id(chat_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –∞–¥–≤–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è - –≤—ã—Ö–æ–¥
    if user is None:
        await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        context.job.schedule_removal()
        return

    db_sess = db_session.create_session()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    recommendations_count = db_sess.query(Recommendation).count()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sent_recommendations = db_sess.query(Status_recommendation).filter(
        Status_recommendation.user_id == user.User_ID).all()

    # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é
    if len(sent_recommendations) != 0:
        last_rec_id = sent_recommendations[-1].rec_id
    else:
        last_rec_id = 0

    new_req_id = last_rec_id + 1
    # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–¥–≤–µ–Ω—Ç - –≤—ã—Ö–æ–¥
    if new_req_id > recommendations_count:
        await context.bot.send_message(chat_id=chat_id, text=f'–í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!')
        context.job.schedule_removal()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    rec_new = db_sess.query(Recommendation).filter(Recommendation.id == new_req_id).first()

    keyboard = [
        [
            InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"{REC_BUTTON_DONE}:{new_req_id}"),
            InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"{REC_BUTTON_SKIP}:{new_req_id}"),
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    message = await context.bot.send_message(chat_id=chat_id,
                                             text=f'{context.job.data}, '
                                                  f'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ {new_req_id}: '
                                                  f'{rec_new.recommendation}!',
                                             reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –±–∞–∑—É
    stat_rec = Status_recommendation()
    stat_rec.chat_id = chat_id
    stat_rec.user_id = user.User_ID
    stat_rec.send_time = datetime.now()
    stat_rec.message_id = message.message_id
    stat_rec.rec_id = new_req_id
    stat_rec.rec_status = 0

    db_sess.add(stat_rec)
    db_sess.commit()

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–≤–∞—è, —Ç–æ –ø–æ–¥—á–∏—â–∞–µ–º –≤ —á–∞—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if last_rec_id > 0:
        old_message = sent_recommendations[-1].message_id
        # TODO: –°–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å, –ø–æ–ª—É—á–∏–º BadRequest –≤ –ª–æ–≥–∞—Ö
        await context.bot.delete_message(chat_id=chat_id, message_id=old_message)


async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id

    user = await find_user_by_chat_id(chat_id)
    if user is None:
        await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
        context.job.schedule_removal()
        return

    db_sess = db_session.create_session()
    sent_recommendations = db_sess.query(Status_recommendation).filter(
        Status_recommendation.user_id == user.User_ID).all()

    count_uncomleted_recommendations = 0
    result = ''

    for rec in sent_recommendations:
        if rec.rec_status == '2':
            count_uncomleted_recommendations += 1
            recomm = db_sess.query(Recommendation).filter(Recommendation.id == rec.rec_id).first()
            recc = recomm.recommendation
            result += f'–î–µ–Ω—å {rec.rec_id}. {recc}\n'

    if result == '':
        context.job.schedule_removal()
        return

    result = f'–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {count_uncomleted_recommendations} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n' + result
    keyboard = [
        [
            InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", callback_data=f"{REC_BUTTON_REPORT}")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    message = await context.bot.send_message(chat_id=chat_id,
                                             text=result,
                                             reply_markup=markup)

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–≤–∞—è, —Ç–æ –ø–æ–¥—á–∏—â–∞–µ–º –≤ —á–∞—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    # if last_rec_id > 0:
    #     old_message = sent_recommendations[-1].message_id
    #     # TODO: –°–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å, –ø–æ–ª—É—á–∏–º BadRequest –≤ –ª–æ–≥–∞—Ö
    #     await context.bot.delete_message(chat_id=chat_id, message_id=old_message)


async def send_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass


async def done_recommendation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    del_idx = query.data.find(":") + 1
    rec_id = int(query.data[del_idx:])

    db_sess = db_session.create_session()
    rec = (db_sess.query(Status_recommendation).
           filter(Status_recommendation.chat_id == chat_id, Status_recommendation.rec_id == rec_id).
           first())

    rec.rec_status = "1"
    db_sess.add(rec)
    db_sess.commit()

    await query.delete_message()
    await context.bot.send_message(chat_id=chat_id, text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ: {rec_id}")


async def skip_recommendation(update, context):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id
    del_idx = query.data.find(":") + 1
    rec_id = int(query.data[del_idx:])

    db_sess = db_session.create_session()
    rec = (db_sess.query(Status_recommendation).
           filter(Status_recommendation.chat_id == chat_id, Status_recommendation.rec_id == rec_id).
           first())

    rec.rec_status = "2"
    db_sess.add(rec)
    db_sess.commit()

    await query.delete_message()
    await context.bot.send_message(chat_id=chat_id, text=f"–û—Ç–ª–æ–∂–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ: {rec_id}")


async def run_recommendation_job(context, user):
    # TODO: –ù—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.job_queue.run_repeating(send_recommendation, 5, data=user.Name, chat_id=user.Chat_Id)


async def run_notification_job(context, user):
    # TODO: –ù—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.job_queue.run_repeating(send_notification, 10, data=user.Name, chat_id=user.Chat_Id)


async def set_timer(update, context):
    chat_id = update.message.chat_id
    user = await find_user_by_chat_id(chat_id)
    if user is None:
        await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω!')
        return

    await context.bot.send_message(chat_id=chat_id, text='–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω')
    await run_notification_job(context, user)
    await run_recommendation_job(context, user)


async def resume_sending(context):
    db_sess = db_session.create_session()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    recommendations_count = db_sess.query(Recommendation).count()
    chat_users = (db_sess.query(Status_recommendation.chat_id).
                  group_by(Status_recommendation.chat_id).
                  having(func.max(Status_recommendation.rec_id) < recommendations_count).
                  all())

    for row in chat_users:
        chat_id = row[0]
        user = await find_user_by_chat_id(chat_id)
        if user is None:
            continue
        await run_recommendation_job(context, user)


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    application.job_queue.run_once(resume_sending, 1)

    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("help", help))

    condition = (filters.TEXT | filters.PHOTO) & ~filters.COMMAND

    # –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    start_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GREETING_STATE: [MessageHandler(condition, greeting)],
            REGISTRATION_STATE: [MessageHandler(condition, registration)],
            NAME_STATE: [MessageHandler(condition, name)],
            SCHEDULE_STATE: [MessageHandler(condition, schedule)],
            TIME_STATE: [MessageHandler(condition, time_schedule)],
            TIMEZONE_STATE: [MessageHandler(condition, timezone_schedule)],
            SEX_STATE: [MessageHandler(condition, sex)],
            AGE_STATE: [MessageHandler(condition, age)],
            PERIOD_STATE: [MessageHandler(condition, period)],
            SHOW_MENU_STATE: [MessageHandler(filters.Text(["–ú–µ–Ω—é"]), show_menu)]
        },
        fallbacks=[
            CommandHandler('stop', stop),
            MessageHandler(filters.Text(["–ú–µ–Ω—é"]), show_menu),
        ]
    )
    application.add_handler(start_handler)

    # –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    profile_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]), show_profile)],
        states={
            PROFILE_SHOW_STATE: [
                MessageHandler(filters.Text(["–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]), show_profile)
            ],
            PROFILE_EDIT_STATE: [
                MessageHandler(filters.Text(["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"]), edit_profile)
            ],
            PROFILE_EDIT_FIELD_STATE: [
                MessageHandler(filters.Text(["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ü–æ–ª", "–ì—Ä–∞—Ñ–∏–∫", "–í—Ä–µ–º—è", "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"]), edit_profile_request),
                MessageHandler(filters.Text(["–ù–∞–∑–∞–¥"]), show_profile)
            ],
            PROFILE_EDIT_APPLY_STATE: [
                MessageHandler(condition, edit_profile_apply)
            ],
        },
        fallbacks=[
            MessageHandler(filters.Text(["–ú–µ–Ω—é"]), show_menu),
        ]
    )

    application.add_handler(profile_handler)
    application.add_handler(
        MessageHandler(filters.Text(["–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ"]), set_timer))

    application.add_handler(CallbackQueryHandler(done_recommendation, pattern=f"^{REC_BUTTON_DONE}:\\d+$"))
    application.add_handler(CallbackQueryHandler(skip_recommendation, pattern=f"^{REC_BUTTON_SKIP}:\\d+$"))

    application.add_handler(CallbackQueryHandler(send_results, pattern=f"^{REC_BUTTON_REPORT}"))

    # –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ"
    # TODO: –û—Ñ–æ—Ä–º–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ –∫–∞–∫ ConversationHandler –∫–∞–∫ —Å–¥–µ–ª–∞–Ω–æ –≤—ã—à–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    # if message_text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ':
    #     db_sess = db_session.create_session()
    #     username = str(update.message.from_user.username)
    #     user = db_sess.query(User).filter(User.UserName == username).first()
    #     name = user.Name
    #
    #     flag_first_event = True
    #     reply_keyboard = [['–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ', '–û—Ç–ª–æ–∂–∏—Ç—å'], ['–ú–µ–Ω—é']]
    #     markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    #     await update.message.reply_text(f"{name} <–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1*>", reply_markup=markup)
    #     return FIRST_EVENT

    application.run_polling()


if __name__ == '__main__':
    main()

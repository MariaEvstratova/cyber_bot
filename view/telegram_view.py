from datetime import datetime, timedelta, time
from typing import Optional

import pytz
import telegram
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler, \
    CallbackQueryHandler, ContextTypes
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, Update

from model.status_recommendation import RecommendationStatusModel
from model.user import UserModel
from service.cyber_advent_service import CyberAdventService, REC_STATUS_INIT, REC_STATUS_DONE, REC_STATUS_SKIP
from service.user_service import UserService
from service.utils import get_timezone_by_utc_offset

(GREETING_STATE, REGISTRATION_STATE, NAME_STATE, SCHEDULE_STATE, SEX_STATE,
 AGE_STATE, TIME_STATE, TIMEZONE_STATE, PERIOD_STATE) = range(9)

PROFILE_SHOW_STATE, PROFILE_EDIT_STATE, PROFILE_EDIT_FIELD_STATE, PROFILE_EDIT_APPLY_STATE = range(4)
ADVENT_TIMER_STATE, ADVENT_WORK_STATE = range(2)
RESULTS_SHOW, RESULTS_REC_NUM, RESULTS_CHANGE = range(3)

BUTTON_REC_DONE, BUTTON_REC_SKIP, BUTTON_REC_REPORT, BUTTON_REC_SHARE, BUTTON_RUN_TEST = ("button_rec_done",
                                                                                          "button_rec_skip",
                                                                                          "button_rec_report",
                                                                                          "button_rec_share",
                                                                                          "button_run_test")

class TelegramBot:

    def __init__(self, bot_token: str, bot_name: str, user_service: UserService, advent_service: CyberAdventService):
        self.bot_token = bot_token
        self.bot_name = bot_name
        self.bot = telegram.Bot(token=self.bot_token)
        self.bot_url = f'https://t.me/{self.bot_name}'
        self.user_service = user_service
        self.advent_service = advent_service

    async def help_message(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat.id)
        if user is None:
            advent_start = None
        else:
            advent_start = user.advent_start

        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help"""
        await update.message.reply_text("–≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã –∏ –ø–æ–º–æ—â–∏ "
                                        "–≤ —É—Å–∏–ª–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                                        "/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è;\n"
                                        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞;\n"
                                        "/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é;\n"
                                        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É.\n\n"
                                        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è "
                                        "—Å –±–æ—Ç–æ–º. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "
                                        "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–ª–µ–µ –≤ *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ* –∏ –ø–æ–º–µ–Ω—è—Ç—å –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä.\n\n"
                                        "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π"
                                        " –∞–¥–≤–µ–Ω—Ç* –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ. –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –≤–∞–º –±—É–¥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ "
                                        "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞(–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Ä–∞–±–æ—á–∏–µ, –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏).\n\n"
                                        "–í–∞–º —Å–ª–µ–¥—É–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ç–º–µ—á–∞—Ç—å —ç—Ç–æ –≤ –±–æ—Ç–µ (–ø–æ –∫–Ω–æ–ø–∫–µ *–≤—ã–ø–æ–ª–Ω–∏—Ç—å* "
                                        "–∏–ª–∏ *–æ—Ç–ª–æ–∂–∏—Ç—å*). –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "
                                        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*.\n\n"
                                        "–ö–Ω–æ–ø–∫–∞ *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π* –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π –±–æ–ª–µ–µ –≥—Ä–∞–º–æ—Ç–Ω—ã–º–∏ –≤ "
                                        "—Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥–µ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ "
                                        "–∑–Ω–∞–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –∫–Ω–æ–ø–∫–µ *–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ*.",
                                        reply_markup=self.build_main_menu(advent_start), parse_mode='markdown')


    async def stop(self, update, context):
        await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END


    def build_job_rec_name(self, user_id: str) -> str:
        return f"rec_{user_id}"


    def build_job_not_name(self, user_id: str) -> str:
        return f"not_{user_id}"


    async def skip_rec(self, context, user_id, rec_id):
        user = await self.user_service.find_user_by_id(user_id)
        if user is None:
            return

        rec = await self.advent_service.find_status_rec_by_id(user.user_id, rec_id)
        if rec is None:
            return
        elif rec.rec_status != REC_STATUS_INIT:
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π –∏–∑ —á–∞—Ç–∞
        if rec.telegram_message_id != "":
            await context.bot.delete_message(chat_id=user.telegram_id, message_id=rec.telegram_message_id)

        # –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        await self.advent_service.skip_rec(user.user_id, rec.rec_id)


    async def start(self, update, context):
        chat_id = str(update.message.chat.id)
        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await self.bot.send_photo(chat_id=chat_id,
                                 photo='https://img.freepik.com/free-vector/flat-background-for-safer-internet-day_23-2151127509.jpg?w=2000&t=st=1717694697~exp=1717695297~hmac=edd5b2ffe89d8b2901334e3df3190bffc0ed426ca69706be691a573487acdd33',
                                 caption="–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞ N –¥–Ω–µ–π —É—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–∞–Ω–Ω—ã—Ö,"
                                         " –∞ —Ç–∞–∫–∂–µ –æ–±—É—á–∏—Ç –æ—Å–Ω–æ–≤–∞–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã. ü§ñ –í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
                                         " –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                                 reply_markup=markup)
            return GREETING_STATE
        else:
            await self.bot.send_photo(chat_id=chat_id,
                                 photo='https://img.freepik.com/free-vector/technical-support-service-site_80328-68.jpg?t=st=1717695596~exp=1717699196~hmac=419f0dc67a3bb3e7fecfe47e9e64615daaee5692bdb3c828e3c2dae5265d1376&w=2000',
                                 caption=f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.name}, –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
                                 reply_markup=self.build_main_menu(user.advent_start))
            return ConversationHandler.END


    async def greeting(self, update, context):
        message_text = update.message.text
        if message_text == '–ó–∞–ø—É—Å—Ç–∏—Ç—å':
            reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–í—ã —Å–¥–µ–ª–∞–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –Ω–∞—á–Ω–µ–º.", reply_markup=markup)
            return REGISTRATION_STATE
        else:
            reply_keyboard = [['–ó–∞–ø—É—Å—Ç–∏—Ç—å']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                            reply_markup=markup)
            return GREETING_STATE


    async def registration(self, update, context):
        message_text = update.message.text
        if message_text == '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!' or message_text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ':
            await update.message.reply_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
            return NAME_STATE
        else:
            reply_keyboard = [['–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –Ω–∞—á–Ω—ë–º!']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ [{message_text}], –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                            reply_markup=markup)
            return REGISTRATION_STATE


    async def name(self, update, context):
        name_value = update.message.text
        if any(ch.isdigit() for ch in name_value):
            await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return NAME_STATE
        else:
            context.user_data['name'] = name_value
            reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ –¥–Ω–∏', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                            " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                            reply_markup=markup)
            return SCHEDULE_STATE


    async def schedule(self, update, context):
        days_value = update.message.text
        if days_value == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or days_value == "–†–∞–±–æ—á–∏–µ –¥–Ω–∏" or days_value == "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
            context.user_data['days'] = days_value
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö(–æ—Ç 0 –¥–æ 23), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚åö")
            return TIME_STATE
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return SCHEDULE_STATE


    async def time_schedule(self, update, context):
        time_value = update.message.text
        if time_value.isdigit():
            if 0 <= int(time_value) <= 23:
                context.user_data['time'] = f'{time_value}:00'
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
                                                "–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –¥–Ω—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.")
                return PERIOD_STATE
            else:
                await update.message.reply_text("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ üòù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return TIME_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return TIME_STATE


    async def period(self, update, context):
        period_value = update.message.text
        if period_value.isdigit():
            if 1 <= int(period_value) <= 30:
                context.user_data['period'] = str(period_value)
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã "
                                                "(–≤ —á–∞—Å–∞—Ö, –Ω–∞—á–∏–Ω–∞—è —Å + –∏–ª–∏ -). "
                                                "–ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞: +4, –¥–ª—è –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞: -1")
                return TIMEZONE_STATE
            else:
                await update.message.reply_text("–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return PERIOD_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return PERIOD_STATE


    async def timezone_schedule(self, update, context):
        if update.message.text[0] != "+" and update.message.text[0] != "-":
            await update.message.reply_text("–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –ª–∏–±–æ —Å +, –ª–∏–±–æ —Å -. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return TIMEZONE_STATE

        if update.message.text[1:].isdigit():
            moscow_offset_value = update.message.text.replace("+", "")
            utc_offset_hours = timedelta(hours=3 + int(moscow_offset_value))
            user_timezone = await get_timezone_by_utc_offset(utc_offset_hours)
            if user_timezone == "":
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –ú–°–ö{update.message.text}, "
                                                f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Ä–∞–∑–Ω–∏—Ü—É –ø–æ —á–∞—Å–∞–º —Å –ú–æ—Å–∫–≤–æ–π.")
                return TIMEZONE_STATE
            else:
                context.user_data['timezone'] = user_timezone

                reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
                markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª", reply_markup=markup)
                return SEX_STATE
        else:
            await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return TIMEZONE_STATE


    async def sex(self, update, context):
        sex_value = update.message.text
        if sex_value == "–ú—É–∂—Å–∫–æ–π" or sex_value == "–ñ–µ–Ω—Å–∫–∏–π" or sex_value == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data['sex'] = sex_value
            reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                              ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=markup)
            return AGE_STATE
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return SEX_STATE


    async def age(self, update, context):
        age_value = update.message.text
        if len(age_value.split()) != 2:
            age = age_value.split()
            context.user_data['age'] = f"{age[1]}-{age[3]}"
        else:
            age = age_value.split()
            if age[1] == '18':
                context.user_data['age'] = "0-18"
            else:
                context.user_data['age'] = "55-100"

        self.create_profile(update, context)

        await update.message.reply_text("–ú–µ–Ω—é", reply_markup=self.build_main_menu())
        return ConversationHandler.END


    def create_profile(self, update, context):
        user = UserModel()
        user.name = context.user_data['name']
        user.age_group = context.user_data['age']
        user.schedule = context.user_data['days']
        user.sex = context.user_data['sex']
        user.telegram_username = str(update.message.from_user.username)
        user.telegram_id = str(update.message.chat.id)
        user.time = context.user_data['time']
        user.timezone = context.user_data['timezone']
        user.period = str(context.user_data['period'])
        self.user_service.create_user(user)


    def build_main_menu(self, advent_start: Optional[datetime] = None) -> ReplyKeyboardMarkup:
        reply_keyboard = [['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏']]
        if advent_start is None:
            # –ö–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ –∞–¥–≤–µ–Ω—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞–Ω–µ–µ –∞–¥–≤–µ–Ω—Ç
            reply_keyboard.append(['–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'])

        reply_keyboard.extend([
            ['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'],
            ['–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ'],
            ['–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', '–ü–æ–º–æ—â—å']])

        return ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)


    async def show_main_menu(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat.id)
        if user is None:
            await update.message.reply_text("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ "
                                            "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start",
                                            reply_markup=ReplyKeyboardRemove())
            return

        await update.message.reply_text("–ú–µ–Ω—é", reply_markup=self.build_main_menu(user.advent_start))
        return ConversationHandler.END


    async def show_profile(self, update, context):
        reply_keyboard = [['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ'], ['–ú–µ–Ω—é']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        user = await self.user_service.find_user_by_telegram_id(update.message.chat.id)
        reply_text = ("–ü—Ä–æ—Ñ–∏–ª—å üîΩ \n"
                      f"üí† –ò–º—è - {user.name} \n"
                      f"üí† –ì—Ä–∞—Ñ–∏–∫ - {user.schedule} \n"
                      f"üí† –í–æ–∑—Ä–∞—Å—Ç - {user.age_group} –ª–µ—Ç \n"
                      f"üí† –í—Ä–µ–º—è –≤—ã–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - {user.time} \n")
        if user.sex != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            reply_text = reply_text + f"üí† –ü–æ–ª - {user.sex}"

        await update.message.reply_text(reply_text, reply_markup=markup)
        return PROFILE_EDIT_STATE


    async def edit_profile(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat.id)
        if user is None:
            return PROFILE_EDIT_STATE

        sent_recs = await self.advent_service.sent_recommendation_count(user.user_id)
        if sent_recs == 0:
            reply_keyboard = [['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', '–ì—Ä–∞—Ñ–∏–∫', '–í—Ä–µ–º—è'], ["–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", '–ù–∞–∑–∞–¥']]
        else:
            reply_keyboard = [['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–æ–ª', "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"], ['–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text("–ß—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=markup)
        return PROFILE_EDIT_FIELD_STATE


    async def edit_profile_request(self, update, context):
        message_text = update.message.text
        context.user_data["edit_profile_request"] = message_text
        if message_text == "–ò–º—è":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
        elif message_text == "–í–æ–∑—Ä–∞—Å—Ç":
            reply_keyboard = [['–¥–æ 18'], ['–æ—Ç 18 –¥–æ 25'], ['–æ—Ç 26 –¥–æ 30', '–æ—Ç 31 –¥–æ 35'],
                              ['–æ—Ç 36 –¥–æ 40', '–æ—Ç 41 –¥–æ 45'], ['–æ—Ç 46 –¥–æ 55', '—Å—Ç–∞—Ä—à–µ 55']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç", reply_markup=markup)
        elif message_text == "–ü–æ–ª":
            reply_keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª", reply_markup=markup)
        elif message_text == "–ì—Ä–∞—Ñ–∏–∫":
            reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                            " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                            reply_markup=markup)
        elif message_text == "–ì—Ä–∞—Ñ–∏–∫":
            reply_keyboard = [['–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'], ['–†–∞–±–æ—á–∏–µ', '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏']]
            markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è"
                                            " —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–∞—Å —É–¥–æ–±–µ–Ω?",
                                            reply_markup=markup)
        elif message_text == "–í—Ä–µ–º—è":
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö(–æ—Ç 0 –¥–æ 23), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚åö")
        elif message_text == "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
                                            "–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –¥–Ω—è—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∂–¥—ã–µ 2 –¥–Ω—è.")
        return PROFILE_EDIT_APPLY_STATE


    async def edit_profile_apply(self, update, context):
        message_text = update.message.text
        request_type = context.user_data["edit_profile_request"]

        if request_type == "–ò–º—è":
            if any(ch.isdigit() for ch in message_text):
                await update.message.reply_text("ü´£ –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ [–∏–º—è/—Ñ–∞–º–∏–ª–∏—é]. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                return PROFILE_EDIT_APPLY_STATE
            context.user_data['name'] = message_text
        elif request_type == "–í–æ–∑—Ä–∞—Å—Ç":
            age_value = update.message.text
            if len(age_value.split()) != 2:
                age = age_value.split()
                context.user_data['age'] = f"{age[1]}-{age[3]}"
            else:
                age = age_value.split()
                if age[1] == '18':
                    context.user_data['age'] = "0-18"
                else:
                    context.user_data['age'] = "55-100"
        elif request_type == "–ü–æ–ª":
            if message_text == "–ú—É–∂—Å–∫–æ–π" or message_text == "–ñ–µ–Ω—Å–∫–∏–π" or message_text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
                context.user_data['sex'] = message_text
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return PROFILE_EDIT_APPLY_STATE
        elif request_type == "–ì—Ä–∞—Ñ–∏–∫":
            if message_text == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ" or message_text == "–†–∞–±–æ—á–∏–µ" or message_text == "–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏":
                context.user_data['days'] = message_text
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                return PROFILE_EDIT_APPLY_STATE
        elif request_type == "–í—Ä–µ–º—è":
            if message_text.isdigit():
                if 0 <= int(message_text) <= 23:
                    context.user_data['time'] = f'{message_text}:00'
                else:
                    await update.message.reply_text("–í —Å—É—Ç–∫–∞—Ö —Ç–æ–ª—å–∫–æ 24 —á–∞—Å–∞ üòù, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                    return PROFILE_EDIT_APPLY_STATE
            else:
                await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return PROFILE_EDIT_APPLY_STATE
        elif request_type == "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
            if message_text.isdigit():
                if 1 <= int(message_text) <= 30:
                    context.user_data['period'] = str(message_text)
                else:
                    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                    return PROFILE_EDIT_APPLY_STATE
            else:
                await update.message.reply_text("–ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º üòú, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return PROFILE_EDIT_APPLY_STATE

        user = await self.user_service.find_user_by_telegram_id(update.message.chat.id)

        user.Name = context.user_data.get('name', user.name)
        user.Age_Group = context.user_data.get('age', user.age_group)
        user.Schedule = context.user_data.get('days', user.schedule)
        user.Sex = context.user_data.get('sex', user.sex)
        user.Time = context.user_data.get('time', user.time)
        user.Period = context.user_data.get('period', user.period)

        self.user_service.update_user(user)

        reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', '–ú–µ–Ω—é']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", reply_markup=markup)
        return PROFILE_SHOW_STATE

    async def send_recommendation_job(self, context):
        is_all_sent = await self.send_recommendation(context, context.job.chat_id)
        if is_all_sent:
            context.job.schedule_removal()


    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    async def send_recommendation(self, context, chat_id) -> bool:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —á–∞—Ç–∞
        user = await self.user_service.find_user_by_telegram_id(chat_id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –∞–¥–≤–µ–Ω—Ç –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç—Å—è - –≤—ã—Ö–æ–¥
        if user is None:
            await context.bot.send_message(chat_id=chat_id,
                                           text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
            return True

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        recommendations_count = await self.advent_service.get_recommendation_count()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_recommendations = await self.advent_service.get_sended_recommendations(user.user_id)

        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é
        if len(sent_recommendations) != 0:
            last_rec = sent_recommendations[-1]
            new_req_id = last_rec.rec_id + 1
        else:
            last_rec = None
            new_req_id = 1

        # –ï—Å–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–¥–≤–µ–Ω—Ç - –≤—ã—Ö–æ–¥
        if new_req_id > recommendations_count:
            await context.bot.send_message(chat_id=user.telegram_id, text=f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!',
                                           reply_markup=self.build_main_menu(user.advent_start))
            return True

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        rec_new = await self.advent_service.get_recommendation_info_by_id(new_req_id)
        if rec_new is None:
            return False

        keyboard = [
            [
                InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"{BUTTON_REC_DONE}:{new_req_id}"),
                InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"{BUTTON_REC_SKIP}:{new_req_id}"),
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        message = await context.bot.send_message(chat_id=user.telegram_id,
                                                 text=f'{user.name}, '
                                                      f'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ {new_req_id}: '
                                                      f'{rec_new.text}!',
                                                 reply_markup=markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –±–∞–∑—É
        stat_rec = RecommendationStatusModel()
        stat_rec.telegram_id = user.telegram_id
        stat_rec.user_id = user.user_id
        stat_rec.send_time = datetime.now()
        stat_rec.telegram_message_id = message.message_id
        stat_rec.rec_id = new_req_id
        stat_rec.rec_status = REC_STATUS_INIT
        await self.advent_service.add_recommendation(stat_rec)

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –ø–µ—Ä–≤–∞—è
        if last_rec:
            # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –±—ã–ª–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–µ
            if last_rec.rec_status == REC_STATUS_INIT:
                await self.skip_rec(context, user.user_id, last_rec.rec_id)

        return False

    async def send_notification_job(self, context: ContextTypes.DEFAULT_TYPE):
        user = await self.user_service.find_user_by_telegram_id(context.job.chat_id)
        if user is None:
            await context.bot.send_message(chat_id=context.job.chat_id,
                                           text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
            context.job.schedule_removal()
            return

        # –ï—Å–ª–∏ –∞–¥–≤–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if await self.advent_service.is_advent_completed(user.user_id):
            context.job.schedule_removal()
            return

        skipped_recommendations = await self.advent_service.get_skipped_recommendations(user.user_id)

        if len(skipped_recommendations) == 0:
            return

        result = ''
        for rec in skipped_recommendations:
            rec_info = await self.advent_service.get_recommendation_info_by_id(rec.rec_id)
            if rec_info is None:
                continue
            result += f'–î–µ–Ω—å {rec.rec_id}. {rec_info.text}\n'

        result = f'–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {len(skipped_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n' + result
        keyboard = [[InlineKeyboardButton("–°–æ–æ–±—â–∏—Ç—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", callback_data=f"{BUTTON_REC_REPORT}")]]
        markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=user.telegram_id, text=result, reply_markup=markup)


    async def done_recommendation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat_id
        del_idx = query.data.find(":") + 1
        rec_id = int(query.data[del_idx:])

        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            return

        # –û—Ç–º–µ—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        await self.advent_service.done_rec(user.user_id, rec_id)

        await query.delete_message()
        await context.bot.send_message(chat_id=chat_id, text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ: {rec_id}")


    async def skip_recommendation(self, update, context):
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat_id
        del_idx = query.data.find(":") + 1
        rec_id = int(query.data[del_idx:])

        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            return

        await self.skip_rec(context, user.user_id, rec_id)
        await context.bot.send_message(chat_id=user.telegram_id, text=f"–û—Ç–ª–æ–∂–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ: {rec_id}")


    async def run_recommendation_job(self, context, chat_id):
        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            return

        user_tz = pytz.timezone(user.timezone)
        user_time = datetime.strptime(user.time, '%H:%M')

        # –ó–∞–ø—É—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        if not await self.advent_service.is_all_recommendation_sent(user.user_id):
            sent_time = time(user_time.hour, user_time.minute, 00, tzinfo=user_tz)
            sent_days = (0, 1, 2, 3, 4, 5, 6)
            if user.schedule == "–†–∞–±–æ—á–∏–µ –¥–Ω–∏":
                sent_days = (0, 1, 2, 3, 4)
            elif user.schedule == '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏':
                sent_days = (5, 6)

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
            context.job_queue.run_daily(self.send_recommendation_job, name=self.build_job_rec_name(user.telegram_id),
                                        time=sent_time, days=sent_days, data=user.name, chat_id=user.telegram_id)

        # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–≤–µ–Ω—Ç
        if not await self.advent_service.is_advent_completed(user.user_id):
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ 30 –º–∏–Ω –ø–æ–∑–∂–µ
            sent_datetime = (user_tz.localize(
                datetime.combine(datetime.today(), time(user_time.hour, user_time.minute, 00)), is_dst=None) +
                             timedelta(minutes=30))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            context.job_queue.run_repeating(self.send_notification_job, name=self.build_job_not_name(user.telegram_id),
                                            first=sent_datetime, interval=timedelta(days=int(user.period)),
                                            data=user.name, chat_id=user.telegram_id)

        # TODO: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # context.job_queue.run_repeating(send_recommendation_job, 5, name=build_job_rec_name(user.Chat_Id), data=user.Name, chat_id=user.Chat_Id)
        # context.job_queue.run_repeating(send_notification_job, 10, name=build_job_not_name(user.Chat_Id), data=user.Name, chat_id=user.Chat_Id)


    async def start_advent(self, update, context):
        chat_id = update.message.chat_id
        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, '
                                                                 '–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
            return

        if not (user.advent_start is None):
            await context.bot.send_message(chat_id=chat_id, text='–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω —Ä–∞–Ω–µ–µ!',
                                           reply_markup=self.build_main_menu(user.advent_start))
            return

        await self.user_service.start_advent(user.user_id)

        await context.bot.send_message(chat_id=chat_id, text='–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω',
                                       reply_markup=self.build_main_menu(datetime.now()))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∞–¥–≤–µ–Ω—Ç–∞
        await self.send_recommendation(context, chat_id)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        await self.run_recommendation_job(context, chat_id)


    async def resume_sending(self, context):
        users_ids = {}

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø—É—â–µ–Ω –∞–¥–≤–µ–Ω—Ç, –Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        users_with_advent = await self.user_service.get_users_with_advent()
        for user in users_with_advent:
            users_ids[user.user_id] = user.user_id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–æ –µ—â–µ –Ω–µ –≤—Å–µ
        active_users = await self.advent_service.get_active_users_ids()
        for user_id in active_users:
            users_ids[user_id] = user_id

        users = await self.user_service.get_users_by_ids(list(users_ids.keys()))
        for user in users:
            await self.run_recommendation_job(context, user.telegram_id)


    async def share(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = str(update.message.chat.id)

        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            await context.bot.send_message(chat_id=chat_id, text='–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–≤–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            context.job.schedule_removal()
            return

        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f'https://t.me/share/url?url={self.bot_url}')
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(chat_id=chat_id,
                                       text=f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º —Å–æ —Å–≤–æ–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –∏ –æ–Ω–∏ "
                                            f"–±—ã–ª–∏ –≥—Ä–∞–º–æ—Ç–Ω—ã–º–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—Ä–µ–¥–µ!",
                                       reply_markup=markup)
        await self.show_main_menu(update, context)


    async def show_recommendation(self, update, context):
        chat_id = update.message.chat_id
        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            return

        list_rec = await self.advent_service.get_last_sended_recommendations(user.user_id, 3)
        if len(list_rec) == 0:
            await context.bot.send_message(chat_id=user.telegram_id,
                                           text='–°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—É—Å—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç"',
                                           reply_markup=self.build_main_menu(user.advent_start))
            return

        result = ''
        for idx, rec in enumerate(list_rec):
            rec_info = await self.advent_service.get_recommendation_info_by_id(rec.rec_id)
            if rec_info is None:
                continue
            if idx == 0:
                result += f'*–î–µ–Ω—å {rec.rec_id}. –°–µ–≥–æ–¥–Ω—è.* {rec_info.text}\n'
            else:
                result += f'*–î–µ–Ω—å {rec.rec_id}.* {rec_info.text}\n'

        await context.bot.send_message(chat_id=user.telegram_id, text=f'–°–ø–∏—Å–æ–∫ —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n\n{result}',
                                       reply_markup=self.build_main_menu(user.advent_start),
                                       parse_mode='markdown')


    async def test_knowledge(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat_id)
        if user is None:
            return

        if await self.advent_service.is_advent_completed(user.user_id):
            keyboard = [[InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"{BUTTON_RUN_TEST}")]]
            markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! '
                '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–≤–∞–Ω–∏–µ –î–∂–µ–¥–∞—è –æ—Ä–¥–µ–Ω–∞ –¶–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω—ã –∏ '
                '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –æ—Ç –ö–∏–±–µ—Ä–ø—Ä–æ—Ç–µ–∫—Ç–∞? '
                '–¢–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!',
                reply_markup=markup)
            await self.show_main_menu(update, context)
        else:
            await update.message.reply_text(
                '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞–¥–≤–µ–Ω—Ç–∞',
                reply_markup=self.build_main_menu(user.advent_start))


    async def forma_yandex(self, update, context):
        query = update.callback_query
        await query.answer()

        chat_id = query.message.chat_id
        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            return

        await context.bot.send_message(chat_id=user.telegram_id, text='https://forms.yandex.ru/u/6663258b5056903972729751/',
                                       reply_markup=self.build_main_menu(user.advent_start))


    # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    async def get_recommendation_page(self, user_id: int, page_num: int, page_size: int) -> str:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_recommendations = await self.advent_service.get_recommendation_page(user_id, page_num, page_size)
        result = ''
        for rec in sent_recommendations:
            if rec.rec_status == REC_STATUS_DONE:
                visualize = 'üü¢'
            elif rec.rec_status == REC_STATUS_SKIP:
                visualize = 'üî¥'
            else:
                visualize = '‚ö™Ô∏è'
            result += f'{visualize} ‚Ññ {rec.rec_id}: {rec.text}\n'
        return result


    async def show_result_query(self, update, context):
        query = update.callback_query
        await query.answer()
        return await self.show_results(update, context)


    async def show_results(self, update, context):
        if not (update.callback_query is None):
            query = update.callback_query
            await query.answer()
            chat_id = query.message.chat_id
        else:
            chat_id = update.message.chat_id

        user = await self.user_service.find_user_by_telegram_id(chat_id)
        if user is None:
            await context.bot.send_message(chat_id=chat_id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        rec_count = await self.advent_service.sent_recommendation_count(user.user_id)
        if rec_count == 0:
            await context.bot.send_message(chat_id=user.telegram_id, text='–ï—â–µ –Ω–∏ –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                                           reply_markup=self.build_main_menu(user.advent_start))
            return

        page_size = 5
        page_num = 0
        page_count = rec_count // page_size
        if rec_count % page_size > 0:
            page_count += 1

        if page_count > 1:
            reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª–µ–µ...', '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]
        else:
            reply_keyboard = [['–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]

        result = await self.get_recommendation_page(user.user_id, page_num, page_size)
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await context.bot.send_message(chat_id=user.telegram_id, text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n{result}\n\n'
                                                                  f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num+1} –∏–∑ {page_count}',
                                       parse_mode='HTML', reply_markup=markup)

        context.user_data['page_size'] = page_size
        context.user_data['page_count'] = page_count
        context.user_data['page_num'] = page_num
        return RESULTS_SHOW


    async def show_result_next(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat_id)
        if user is None:
            return

        page_size = context.user_data['page_size']
        page_count = context.user_data['page_count']
        page_num = context.user_data['page_num'] + 1

        if page_num < (page_count - 1):
            reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª–µ–µ...', '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]
        else:
            reply_keyboard = [['–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]

        result = await self.get_recommendation_page(user.user_id, page_num, page_size)
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await context.bot.send_message(chat_id=user.telegram_id, text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n{result}\n\n'
                                                                  f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num+1} –∏–∑ {page_count}',
                                       parse_mode='HTML', reply_markup=markup)

        context.user_data['page_num'] = page_num
        return RESULTS_SHOW


    async def change_results(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat_id)
        if user is None:
            return

        page_count = context.user_data['page_count']
        page_num = context.user_data['page_num'] + 1

        if page_num < (page_count - 1):
            reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª–µ–µ...', '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]
        else:
            reply_keyboard = [['–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        await context.bot.send_message(chat_id=user.telegram_id,
                                       text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å',
                                       reply_markup=markup)
        return RESULTS_REC_NUM


    async def change_status_results(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat_id)
        if user is None:
            return

        page_count = context.user_data['page_count']
        page_num = context.user_data['page_num'] + 1

        if page_num < (page_count - 1):
            reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª–µ–µ...', '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]
        else:
            reply_keyboard = [['–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ú–µ–Ω—é']]
        markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)

        rec_id = update.message.text
        if not rec_id.isdigit():
            await context.bot.send_message(chat_id=user.telegram_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                                           reply_markup=markup)
            return RESULTS_REC_NUM

        rec_info = await self.advent_service.get_recommendation_info_by_id(update.message.text)
        if rec_info is None:
            await context.bot.send_message(chat_id=user.telegram_id,
                                           text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                           reply_markup=markup)
            return RESULTS_REC_NUM

        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"{BUTTON_REC_DONE}:{rec_id}")],
            [InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"{BUTTON_REC_SKIP}:{rec_id}")]
        ]
        inline_markup = InlineKeyboardMarkup(keyboard)
        rec = f'‚Ññ {rec_id}: {rec_info.text}\n'
        await context.bot.send_message(chat_id=user.telegram_id, text=rec, reply_markup=inline_markup)
        return RESULTS_SHOW


    async def handle_everything_else(self, update, context):
        user = await self.user_service.find_user_by_telegram_id(update.message.chat_id)
        if user is None:
            await context.bot.send_message(chat_id=update.message.chat_id,
                                           text="ü§ñ –û–π, –≤–æ–∑–º–æ–∂–Ω–æ –º—ã –µ—â–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã —Å –≤–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
            return

        await update.message.reply_text("ü§ñ –ß—Ç–æ-—Ç–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é",
                                        reply_markup=self.build_main_menu(user.advent_start))
        return ConversationHandler.END

    def run(self):
        application = Application.builder().token(self.bot_token).build()

        # –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
        application.job_queue.run_once(self.resume_sending, 1)

        application.add_handler(CommandHandler("stop", self.stop))
        application.add_handler(CommandHandler("help", self.help_message))
        application.add_handler(CommandHandler("menu", self.show_main_menu))

        condition = (filters.TEXT | filters.PHOTO) & ~filters.COMMAND

        # –°—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        start_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                GREETING_STATE: [MessageHandler(condition, self.greeting)],
                REGISTRATION_STATE: [MessageHandler(condition, self.registration)],
                NAME_STATE: [MessageHandler(condition, self.name)],
                SCHEDULE_STATE: [MessageHandler(condition, self.schedule)],
                TIME_STATE: [MessageHandler(condition, self.time_schedule)],
                TIMEZONE_STATE: [MessageHandler(condition, self.timezone_schedule)],
                SEX_STATE: [MessageHandler(condition, self.sex)],
                AGE_STATE: [MessageHandler(condition, self.age)],
                PERIOD_STATE: [MessageHandler(condition, self.period)],
            },
            fallbacks=[
                CommandHandler('stop', self.stop),
            ]
        )
        application.add_handler(start_handler)

        # –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
        profile_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Text(["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]), self.show_profile)],
            states={
                PROFILE_SHOW_STATE: [
                    MessageHandler(filters.Text(["–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]), self.show_profile)
                ],
                PROFILE_EDIT_STATE: [
                    MessageHandler(filters.Text(["–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"]), self.edit_profile)
                ],
                PROFILE_EDIT_FIELD_STATE: [
                    MessageHandler(filters.Text(["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ü–æ–ª", "–ì—Ä–∞—Ñ–∏–∫", "–í—Ä–µ–º—è", "–ü–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"]),
                                   self.edit_profile_request),
                    MessageHandler(filters.Text(["–ù–∞–∑–∞–¥"]), self.show_profile)
                ],
                PROFILE_EDIT_APPLY_STATE: [
                    MessageHandler(condition, self.edit_profile_apply)
                ],
            },
            fallbacks=[
                MessageHandler(filters.Text(["–ú–µ–Ω—é"]), self.show_main_menu),
                MessageHandler(filters.ALL, self.handle_everything_else)
            ]
        )

        application.add_handler(profile_handler)
        application.add_handler(
            MessageHandler(filters.Text(["–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∞–¥–≤–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ"]), self.start_advent))
        application.add_handler(MessageHandler(filters.Text(["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]), self.show_recommendation))
        application.add_handler(MessageHandler(filters.Text(["–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–≥–∏–µ–Ω–µ"]), self.test_knowledge))
        application.add_handler(MessageHandler(filters.Text(["–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π"]), self.share))
        application.add_handler(MessageHandler(filters.Text(["–ü–æ–º–æ—â—å"]), self.help_message))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        results_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Text(["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]), self.show_results),
                CallbackQueryHandler(self.show_result_query, pattern=f"^{BUTTON_REC_REPORT}")
            ],
            states={
                RESULTS_SHOW: [
                    MessageHandler(filters.Text(["–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–ª–µ–µ..."]), self.show_result_next),
                    MessageHandler(filters.Text(["–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]), self.change_results)
                ],
                RESULTS_REC_NUM: [
                    MessageHandler(condition, self.change_status_results)
                ],
                RESULTS_CHANGE: [
                    MessageHandler(filters.Text(["–ù–∞–∑–∞–¥"]), self.show_results)
                ],
            },
            fallbacks=[
                MessageHandler(filters.Text(["–ú–µ–Ω—é"]), self.show_main_menu),
                MessageHandler(filters.ALL, self.handle_everything_else)
            ],
        )
        application.add_handler(results_handler)

        application.add_handler(CallbackQueryHandler(self.done_recommendation, pattern=f"^{BUTTON_REC_DONE}:\\d+$"))
        application.add_handler(CallbackQueryHandler(self.skip_recommendation, pattern=f"^{BUTTON_REC_SKIP}:\\d+$"))
        application.add_handler(CallbackQueryHandler(self.forma_yandex, pattern=f"^{BUTTON_RUN_TEST}$"))
        application.add_handler(
            CallbackQueryHandler(results_handler.entry_points[0].callback, pattern=f"^{BUTTON_REC_REPORT}"))

        application.add_handler(MessageHandler(filters.ALL, self.handle_everything_else))
        application.run_polling()

